{"remainingRequest":"/home/devue/myItem/vuepress-blog/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/devue/myItem/vuepress-blog/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/devue/myItem/vuepress-blog/node_modules/vue-loader/lib/index.js??ref--1-1!/home/devue/myItem/vuepress-blog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/home/devue/myItem/vuepress-blog/docs/technical-summary/nuxt/README.md?vue&type=template&id=3b0b2fba&","dependencies":[{"path":"/home/devue/myItem/vuepress-blog/docs/technical-summary/nuxt/README.md","mtime":1550460402240},{"path":"/home/devue/myItem/vuepress-blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/devue/myItem/vuepress-blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/devue/myItem/vuepress-blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/devue/myItem/vuepress-blog/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/devue/myItem/vuepress-blog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"nuxt\\\"><a href=\\\"#nuxt\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> NUXT</h1> <h2 id=\\\"nuxt教程\\\"><a href=\\\"#nuxt教程\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> nuxt教程</h2> <div class=\\\"language- line-numbers-mode\\\"><pre class=\\\"language-text\\\"><code>vue init nuxt-community/starter-template &lt;project-name&gt;\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>随着现在vue和react的流行，许多网站都做成了SPA，确实提升了用户体验，\\n但SPA也有两个弱点，就是SEO和首屏渲染速度。为了解决单页应用的痛点，\\n基于vue和react的服务端渲染应运而生。由于公司的框架采用的是vue，\\n所以就简单的研究了一下基于vue的服务端渲染框架——NUXT。\\n在vue的官网有关于服务端渲染的详细介绍，\\n而NUXT集成了利用Vue开发服务端渲染的应用所需要的各种配置，\\n也集成了Vue2、vue-router、vuex、vux-meta（管理页面meta信息的），\\n利用官方的脚手架，基本上是傻瓜式操作，不用写路由配置，\\n不用写webpcak配置就可以跑起来一个基于服务端渲染的SPA。</p> <h3 id=\\\"nuxt特性\\\"><a href=\\\"#nuxt特性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Nuxt特性</h3> <p>NUXT的特性包括：</p> <ul><li>基于 Vue.js</li> <li>自动代码分层</li> <li>服务端渲染</li> <li>强大的路由功能，支持异步数据</li> <li>静态文件服务</li> <li>ES6/ES7 语法支持</li> <li>打包和压缩 JS 和 CSS</li> <li>HTML头部标签管理</li> <li>本地开发支持热加载</li> <li>集成ESLint</li> <li>列表项目</li> <li>支持各种样式预处理器： SASS、LESS、 Stylus等等</li></ul> <h3 id=\\\"nuxt目录结构\\\"><a href=\\\"#nuxt目录结构\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Nuxt目录结构</h3> <p>通过</p> <div class=\\\"language- line-numbers-mode\\\"><pre class=\\\"language-text\\\"><code>vue init nuxt-community/starter-template &lt;project-name&gt;\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>生成的文件目录结构如下：</p> <p><img\"+(_vm._ssrAttr(\"src\",require(\"./public/nuxt1.png\")))+\" alt=\\\"avatar\\\"></p> <p>其中有一些目录（layouts、pages、static、store、nuxt.config.js、package.json）是Nuxt保留的，不可以更改，需要注意一下。</p> <h3 id=\\\"nuxt路由\\\"><a href=\\\"#nuxt路由\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Nuxt路由</h3> <p>Nuxt中的一大特点就是路由无需手动配置，会根据pages下的文件路径自动生成一套路由。如果路由中需要带参数，只需将pages下的文件已下划线_作为前缀即可。例如pages下的目录结构如下：</p> <div class=\\\"language- line-numbers-mode\\\"><pre class=\\\"language-text\\\"><code>pages/\\n--| user/\\n-----| index.vue\\n-----| one.vue\\n-----| _id.vue\\n--| index.vue\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>Nuxt自动生成的路由配置为：</p> <div class=\\\"language- line-numbers-mode\\\"><pre class=\\\"language-text\\\"><code>router: {\\n  routes: [\\n    {\\n      name: 'index',\\n      path: '/',\\n      component: 'pages/index.vue'\\n    },\\n    {\\n      name: 'user',\\n      path: '/user',\\n      component: 'pages/user/index.vue'\\n    },\\n    {\\n      name: 'user-one',\\n      path: '/user/one',\\n      component: 'pages/user/one.vue'\\n    },\\n    {\\n      name: 'users-id',\\n      path: '/users/:id?',\\n      component: 'pages/users/_id.vue'\\n    },\\n  ]\\n}\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br></div></div><p>而在vue文件中可以针对路由的参数进行校验，例如在pages/users/_id.vue文件中</p> <div class=\\\"language- line-numbers-mode\\\"><pre class=\\\"language-text\\\"><code>export default {\\n  validate ({ params }) {\\n    // Must be a number\\n    return /^\\\\d+$/.test(params.id)\\n  }\\n}\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果校验方法返回的值不为 true， Nuxt 将自动加载显示 404 错误页面。而这个错误页面需要写在指定的位置，也就是layout中error页面。接下来就来介绍有关视图相关的东西。\\nNuxt视图\\n可以在layouts目录下创建自定义的布局，可以通过更改 layouts/default.vue 文件来扩展应用的默认布局。需要在布局文件中添加 \"),_c('nuxt'),_vm._ssrNode(\" 组件用于显示页面的主体内容，感觉跟vue中的slot方法类似。例如在默认布局中增加header和footer，这样每个页面都会加上header和footer。\")],2),_vm._ssrNode(\" <div class=\\\"language- line-numbers-mode\\\"><pre class=\\\"language-text\\\"><code>&lt;template&gt;\\n  &lt;div&gt;\\n    &lt;header&gt;VUE SRR DEMO&lt;/header&gt;\\n    &lt;nuxt/&gt;\\n    &lt;footer&gt;COPYRIGHT LXY&lt;/footer&gt;\\n  &lt;/div&gt;\\n&lt;/template&gt;\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><p>而上面说到的error页面，可以通过在layouts下增加error.vue文件来修改默认的错误页面。该页面可以接受一个error参数。</p> <div class=\\\"language- line-numbers-mode\\\"><pre class=\\\"language-text\\\"><code>&lt;template&gt;\\n  &lt;div class=&quot;container&quot;&gt;\\n    &lt;h1 v-if=&quot;error.statusCode === 404&quot;&gt;页面不存在&lt;/h1&gt;\\n    &lt;h1 v-else&gt;应用发生错误异常&lt;/h1&gt;\\n    &lt;p class=&quot;goback&quot;&gt;\\n      &lt;nuxt-link to=&quot;/&quot;&gt;返回首页&lt;/nuxt-link&gt;\\n    &lt;/p&gt;\\n  &lt;/div&gt;\\n&lt;/template&gt;\\n\\n&lt;script&gt;\\nexport default {\\n  props: ['error'],\\n  layout: 'self-aside'\\n}\\n&lt;/script&gt;\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br></div></div><p>也可以给某个页面指定特定的模板，做到个性化布局。例如在上面的error页面中，我指定了一个self-aside的模板\\n以上所说的都是有关布局和路由相关的东西，而还没有讲到有关服务端渲染的知识，究竟 Nuxt 是如何做到SSR的呢，关键人物要出场了。\\nNuxt asyncData 方法\\nNuxt 扩展了 Vue.js，增加了一个叫 asyncData 的方法，使得我们可以在设置组件的数据之前能异步获取或处理数据。这个函数可了不得了，有了它，我们可以先从服务员拿到数据，在服务端解析好，拼成HTML字符串，返回给浏览器。\\nasyncData方法会在组件每次加载之前被调用，它可以在服务端或路由更新之前被调用。 可以利用 asyncData方法来获取数据，Nuxt 会将 asyncData 返回的数据融合组件 data 方法返回的数据一并返回给当前组件。这个方法只能用在页面组件中，在componets下在公共组件是不能调用该方法的，Nuxt 不会扩展增强该目录下 Vue 组件。\\n因为 asyncData 方法是在组件 初始化 前被调用的，所以在方法内是没有办法通过 this 来引用组件的实例对象。</p> <div class=\\\"language- line-numbers-mode\\\"><pre class=\\\"language-text\\\"><code>async asyncData ({ params, error }) {\\n    const { data } = await axios.get('https://jsonplaceholder.typicode.com/users')\\n    return { \\n      users: data.slice(0,5)\\n    }\\n  },\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>上面demo中asyncData返回的数据赋值给了users，这样我就可以在页面中像使用data里的数据一样去使用users，例如我在template下循环出users</p> <div class=\\\"language- line-numbers-mode\\\"><pre class=\\\"language-text\\\"><code>&lt;ul&gt;\\n    &lt;li v-for=&quot;item in users&quot; :key=&quot;item.name&quot;&gt;{{item.name}}&lt;/li&gt;\\n &lt;/ul&gt;\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p>我现在去查看源代码，发现页面中li中的数据已经渲染过来了，\\n。</p> <p>附一张Nuxt渲染的流程图：\\n<img\"+(_vm._ssrAttr(\"src\",require(\"./public/nuxt2.png\")))+\" alt=\\\"avatar\\\"></p> <h2 id=\\\"问题：-nodemon-app-crashed-waiting-for-file-changes-before-starting\\\"><a href=\\\"#问题：-nodemon-app-crashed-waiting-for-file-changes-before-starting\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 问题：[nodemon] app crashed - waiting for file changes before starting...</h2> <p>问题：[nodemon] app crashed - waiting for file changes before starting...\\n等你改完之后重启\\n<img\"+(_vm._ssrAttr(\"src\",require(\"./public/nuxt3.png\")))+\" alt=\\\"avatar\\\"></p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}